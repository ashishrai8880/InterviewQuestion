1. What is difference between WHERE clause and HAVING clause ?
Ans : In SQL, the WHERE and HAVING clauses are essential for filtering data and refining query results. While both 
serve the purpose of applying conditions, they are used at different stages of query execution and for distinct purposes.

-> WHERE : WHERE Clause is used to filter the records from the table or used while joining more than one table. Only those
records will be extracted who are satisfying the specified condition in the WHERE clause. It can be used with SELECT, UPDATE, 
and DELETE statements. It is applied before any grouping or aggregation occurs in a query .

SELECT S_Name, Age 
FROM Student 
WHERE Age >=18

-> HAVING : HAVING Clause is used to filter the records from the groups based on the given condition in the HAVING Clause.
Those groups who will satisfy the given condition will appear in the final result. It is applied after the grouping and
aggregation of data.

SELECT Age, COUNT(Roll_No) AS No_of_Students 
FROM Student GROUP BY Age
HAVING COUNT(Roll_No) > 1 

 The WHERE clause filters rows before any grouping or aggregation occurs. The HAVING clause filters grouped data after aggregation.

========================================================================================================================
========================================================================================================================

2. What is normalization and what are different types of normalisation ?
Ans : Normalisation is a process for organizing data in a database in order to reduce redundancy and duplicacy in database .

a. First Normal Form : It states that one column can contain single value . If it is containing more than 1 value , 
then it violates first normal form . 
 Rollno.     Language
 1.           c , c++ , java             // it is wrong , it should contain only 1 value for each row in column

b. Second Normal Form : There should not be any partial dependency , there should be full dependency .  For a table
to be in 2NF, it must first meet the requirements of First Normal Form (1NF), meaning all columns should contain single,
indivisible values without any repeating groups. Additionally, the table should not have partial dependencies

Example : https://www.geeksforgeeks.org/second-normal-form-2nf/ 






=================================================================================================================
=================================================================================================================

3. What is Cascade?
In SQL, the term CASCADE refers to an action triggered automatically when a change occurs in a parent table,
propagating the update or deletion to the related child table(s). By using ON DELETE CASCADE or ON UPDATE CASCADE,
we can ensure referential integrity, maintain consistent relationships, and reduce the complexity of manual database
management tasks.


=================================================================================================================
=================================================================================================================

4. What is Inner Join ?
Ans : Inner join : The INNER JOIN clause in SQL is used to combine records from two or more tables. The result contains
only the rows that have matching values in both tables based on a specific condition. 

Inner Join:

Combines rows from two tables where there is a match based on the condition.
If there’s no match, those rows are not included in the result.
Example: If you have two tables, Employees and Departments, an inner join will show only employees who belong to a department.

Outer Join:

Returns all rows from one table and the matching rows from the other table.
If there is no match, it still returns the rows from the first table with NULLs in place of missing values from the second table.
There are three types of outer joins: Left, Right, and Full.

Left Join (or Left Outer Join):

Returns all rows from the left table and the matching rows from the right table.
If there is no match, the result will show NULLs for the right table columns.
Example: If you have a list of all employees and want to include department details (if available), a left join will return all employees, even if they don’t belong to a department.

Right Join (or Right Outer Join):

Returns all rows from the right table and the matching rows from the left table.
If there’s no match, it shows NULLs for the left table columns.
Example: If you want to list all departments with their employees, a right join will show all departments, even if no employees belong to them.
