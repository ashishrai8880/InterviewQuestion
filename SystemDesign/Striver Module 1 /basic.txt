
    Horizontal                                                          Vertical
1.   Load Balancing Required                                            No Such Requirement
2.   Resilient                                                          Single Point of Failure
3.   Network Calls required                                             Inter Process Communication
4.   Data Inconsistent                                                  Consistency
5.   Scales well as user increase                                       Hardware Limit


Vertical Scaling
Vertical scaling, also known as scaling up, refers to the process of increasing the capacity or capabilities of an
individual hardware or software component within a system.

We upgrade the same system rather than adding more systems. Add more power to your machine by adding better processors, 
increasing RAM, or other power-increasing adjustments.
Simple to implement and useful for monolithic and small scale applications.
vertical

Examples
Upgrading a MySQL server from 16 GB RAM to 64 GB to handle more queries.
Moving a website hosted on a 2-core VM to an 8-core, higher-RAM VM to improve performance.
E-commerce platform running on a single large AWS EC2 instance with increased resources (CPU, RAM, disk).

Advantages
Increased capacity: A server's performance and ability to manage incoming requests can both be enhanced by upgrading its hardware.
Easier management: Upgrading a single node is usually the focus of vertical scaling, which might be simpler than maintaining several nodes.

Disadvantages
Limited scalability: Vertical scaling is constrained by the hardware's physical limitations. Horizontal Scaling is not 
limited.
One server still receives all incoming requests thus increasing the possibility of downtime in the event of a server failure.
Scaling up often requires restarting or replacing the machine, causing downtime.

======================= Horizontal Scaling
Horizontal scaling, also known as scaling out, refers to the process of increasing the capacity or performance of a 
system by adding more machines or servers to distribute the workload across a larger number of individual units.

There is no need to change the capacity of the server or replace the server.
There is no downtime while adding more servers to the network.
horizontal

Examples
A website like GeeksforGeeks adds more web servers behind a load balancer to handle traffic spikes.
Netflix scales different microservices independently â€” e.g., multiple instances of the streaming service across regions.
Amazon Auto Scaling spins up more EC2 instances during peak shopping hours (e.g., Black Friday).
Akamai or Cloudflare uses servers distributed globally to serve content closer to users.

Advantages

Increased capacity: More nodes or instances can handle a larger number of incoming requests.
Improved performance: By distributing the load over several nodes or instances, it is less likely that any one server will 
get overloaded.
Increased fault tolerance: Incoming requests can be sent to another node in the event of a node failure, lowering the
possibility of downtime.

Disadvantages

Requires complex architecture (load balancers, distributed databases, etc.).
Difficult to maintain strong consistency across distributed nodes. Requires synchronization, messaging, or replication
between nodes.
More machines = more networking, power, and maintenance.
Needs orchestration tools (e.g., Kubernetes, Ansible) to manage many servers.
Issues can be spread across nodes, making root-cause analysis tricky.
Communication between nodes adds latency and complexity.

 ====> Which scaling option is right for an application?
There will be always some tradeoffs so it may be a little bit trickier for developers to decide which one is better for an 
application.

Firstly, you should identify your requirements, business goals, and areas where we would like to add value.
Then make important design decisions by questioning ourselves, developing prototypes, and refining the design.
Most of the time in big organizations engineers take some good qualities of vertical scaling and some good qualities of
horizontal scaling.
They follow a hybrid approach of combining the speed and consistency of vertical scaling, with the resilience and infinite 
scalability of horizontal scaling. 
